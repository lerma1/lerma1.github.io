{"version":3,"sources":["components/Table.js","components/History.js","components/Navbar.js","components/App.js","tree.js","index.js","examples-table.js"],"names":["MyTable","props","state","tree","widthWindow","heightWindow","this","setState","window","innerWidth","innerHeight","tdElements","arrayOfDepth","sortOfDepth","widthElement","length","heightElement","getMaxDepth","i","tr","key","Date","map","currentNode","OverlayTrigger","trigger","placement","overlay","Tooltip","id","value","onClick","onClickCellInsertRow","className","onClickCellInsertCol","rowSpan","VerticalSpan","colSpan","getColSpan","style","color","children","push","Component","History","history","currentIndex","unDoButtonEnabled","Button","onClickUnDo","unDoButtonDisabled","disabled","reDoButtonEnabled","onClickReDo","reDoButtonDisabled","historyList","data","item","index","text","enableUnDo","enableReDo","MyNavbar","Navbar","collapseOnSelect","expand","bg","variant","Toggle","aria-controls","Collapse","Nav","ToggleButtonGroup","type","name","defaultValue","onChange","onChoiceTable","ToggleButton","App","isValidate","Number","isInteger","getMaxValue","alert","insertRow","newTree","addRow","newHistory","slice","isCheckedRow","isCheckedCol","insertCol","addColumn","bind","indexCheckedTable","event","target","tree1","tree2","tree3","console","log","height","Node","Tree","json","_root","JSON","parse","node","prototype","traverse","callback","recurse","targetValue","maxValue","currentCell","findNode","indexesParents","getParentsIndex","getParent","cellForInsert","getDepth","addCellWithShiftRight","cell","path","currentPath","update","addCellWithShiftDown","pop","incrementVerticalSpan","$apply","x","targetRow","cellsToChange","hasRow","k","newCell","parent","find","depth","maxDepth","arrIndex","currentValue","unshift","findIndex","element","foundNode","getNumbersRow","arrRows","row","current","getLowerCells","Rows","lowerRow","lowerCells","isParentOfChild","child","undefined","countDepthChildren","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66379f24.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport '../css/style.css'\r\n\r\n\r\nclass MyTable extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tree: this.props.tree,\r\n            widthWindow: 900,\r\n            heightWindow: 1080,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({widthWindow: window.innerWidth});\r\n        this.setState({heightWindow: window.innerHeight});\r\n    }\r\n\r\n    render() {\r\n        const tdElements = [];\r\n\r\n        const arrayOfDepth = this.state.tree.sortOfDepth();\r\n\r\n        let widthElement = this.state.widthWindow*0.75/arrayOfDepth[arrayOfDepth.length-1].length;\r\n        let heightElement = this.state.heightWindow*0.35/ this.props.tree.getMaxDepth();\r\n\r\n        for (let i = 1; i < arrayOfDepth.length; i++) {\r\n\r\n            let tr = <tr key={'tr' + i + new Date()}>\r\n                {arrayOfDepth[i].map((currentNode) =>\r\n                    <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={\r\n                        <Tooltip  id={`tooltip-right`}  >\r\n                            <button id={currentNode.value} onClick={this.props.onClickCellInsertRow} className=\"btn btn-outline-light border-0 d-block \">Вставить строку</button>\r\n                            <button id={currentNode.value} onClick={this.props.onClickCellInsertCol} className=\"btn btn-outline-light border-0 d-block\">Вставить столбец</button>\r\n                        </Tooltip>\r\n                    } key={currentNode.value}>\r\n                        <td key={currentNode.value}\r\n                          rowSpan={currentNode.VerticalSpan}\r\n                          colSpan={this.state.tree.getColSpan(currentNode)}\r\n                          style={{\r\n                              \"background-color\": currentNode.color,\r\n                              \"width\": ((currentNode.children.length || 1) * widthElement) + \"px\",\r\n                              \"height\": (currentNode.VerticalSpan * heightElement) + \"px\"\r\n                          }}\r\n                          >\r\n                    {currentNode.value}\r\n                </td></OverlayTrigger>)}\r\n            </tr>;\r\n\r\n            tdElements.push(tr);\r\n        }\r\n\r\n        return (\r\n            <div className=\"container \" id = \"table\">\r\n                <table className=\"table-tree h4\">\r\n                    {tdElements}\r\n                </table>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyTable","import React, {Component} from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport '../css/style.css'\r\n\r\n\r\nclass History extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            history: this.props.history,\r\n            currentIndex: this.props.history.currentIndex,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const unDoButtonEnabled = <Button className=\"m-2 d-inline-flex btn-success\"\r\n                                        onClick={this.props.onClickUnDo}>Отменить</Button>;\r\n        const unDoButtonDisabled = <Button className=\"m-2 d-inline-flex btn-secondary\" disabled>Отменить</Button>;\r\n        const reDoButtonEnabled = <Button className=\"m-2 d-inline-flex btn-success\"\r\n                                        onClick={this.props.onClickReDo}>Вернуть</Button>;\r\n        const reDoButtonDisabled = <Button className=\"m-2 d-inline-flex btn-secondary\" disabled>Вставить</Button>;\r\n\r\n\r\n        const historyList = this.state.history.data.map((item, index) =>\r\n            (this.state.history.currentIndex == index) ?\r\n                <li key={index} className=\"font-weight-bold\"> {item.text} </li> :\r\n                <li key={index} className=\"\"> {item.text} </li>\r\n        );\r\n\r\n        return (\r\n            <div className=\" card history  p-0 m-auto \">\r\n                <div className=\"card-header d-flex justify-content-between \">\r\n                    <div className=\"d-inline-block h5 mt-auto mb-auto\">История</div>\r\n                    <div className=\"\">\r\n                        {(this.props.enableUnDo) ? unDoButtonEnabled : unDoButtonDisabled}\r\n                        {(this.props.enableReDo) ? reDoButtonEnabled : reDoButtonDisabled}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"border history-list m-3\">\r\n                    <ul id=\"history-list\">\r\n                        {historyList}\r\n                    </ul>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default History;\r\n","import React, {Component} from 'react';\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\n\r\n\r\n\r\n\r\nexport default class MyNavbar extends Component {\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n            <Navbar collapseOnSelect expand=\"sm\" bg=\"info\" variant=\"dark\" className =\"d-flex justify-content-between\" >\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className =\"d-inline-block mr-auto ml-auto\">\r\n                        <ToggleButtonGroup className=\"\" type=\"radio\" name=\"options\" defaultValue={3}   onChange={this.props.onChoiceTable} >\r\n                            <ToggleButton variant=\"outline-light\" value={1}>Таблица 1</ToggleButton>\r\n                            <ToggleButton variant=\"outline-light\" value={2}>Таблица 2</ToggleButton>\r\n                            <ToggleButton variant=\"outline-light\" value={3}>Таблица 3</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport MyTable from \"./Table\";\r\nimport History from \"./History\";\r\nimport MyNavbar from \"./Navbar\";\r\nimport {tree1, tree2, tree3} from \"../index\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport \"../css/style.css\"\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.onChoiceTable = this.onChoiceTable.bind(this);\r\n        this.onClickUnDo = this.onClickUnDo.bind(this);\r\n        this.onClickReDo = this.onClickReDo.bind(this);\r\n        this.onClickCellInsertRow = this.onClickCellInsertRow.bind(this);\r\n        this.onClickCellInsertCol = this.onClickCellInsertCol.bind(this);\r\n\r\n        this.state = {\r\n            tree: this.props.history.data[0].tree,\r\n            history: this.props.history,\r\n            enableUnDo: false,\r\n            enableReDo: false,\r\n            isCheckedRow: true,\r\n            isCheckedCol: false,\r\n            indexCheckedTable: 1,\r\n\r\n        }\r\n    }\r\n    isValidate = (value) => {\r\n\r\n        if (!Number.isInteger(value)) {\r\n            alert(\"Введите целое число - номер ячейки в таблице!\");\r\n            return false;\r\n        }\r\n\r\n        if (value > this.state.tree.getMaxValue()) {\r\n            alert(\"Элемент с таким номером не найден!\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    insertRow = (value) => {\r\n        const newTree = this.state.tree.addRow(value);\r\n        let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice(0, this.state.history.currentIndex+1)};\r\n        newHistory.data.push({text: `Вставлена строка в ячейку № ${value}`, tree: newTree});\r\n\r\n        this.setState({tree: newTree, isCheckedRow: true, isCheckedCol: false, history: newHistory});\r\n    }\r\n\r\n    insertCol = (value) => {\r\n        const newTree = this.state.tree.addColumn(value);\r\n        let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice(0, this.state.history.currentIndex+1)};\r\n        newHistory.data.push({text: `Вставлен столбец в ячейку № ${value}`, tree: newTree});\r\n\r\n        this.setState({tree: newTree, isCheckedRow: false, isCheckedCol: true, history: newHistory});\r\n    }\r\n\r\n    onClickCellInsertRow(event) {\r\n        const value = Number(event.target.id);\r\n        this.insertRow(value);\r\n    }\r\n\r\n    onClickCellInsertCol(event) {\r\n        const value = Number(event.target.id);\r\n        this.insertCol(value);\r\n    }\r\n\r\n    onChoiceTable(value) {\r\n\r\n        if (value == 1) {\r\n            const newTree = tree1;\r\n            let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice(0, this.state.history.currentIndex+1)};\r\n            newHistory.data.push({text: `Создана таблица №1`, tree: newTree});\r\n\r\n            this.setState({tree: newTree, history: newHistory, indexCheckedTable: 0});\r\n\r\n        }\r\n        if (value == 2) {\r\n            const newTree = tree2;\r\n            let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice(0, this.state.history.currentIndex+1)};\r\n            newHistory.data.push({text: `Создана таблица №2`, tree: newTree});\r\n\r\n            this.setState({history: newHistory, tree: newTree, indexCheckedTable: 1});\r\n        }\r\n        if (value == 3) {\r\n            const newTree = tree3;\r\n            let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice(0, this.state.history.currentIndex+1)};\r\n            newHistory.data.push({text: `Создана таблица №3`, tree: newTree});\r\n\r\n            this.setState({history: newHistory, tree: newTree, indexCheckedTable: 1});\r\n        }\r\n    }\r\n\r\n    onClickUnDo() {\r\n\r\n        const newHistory = {currentIndex: this.state.history.currentIndex - 1, data: this.state.history.data.slice()};\r\n        this.setState({tree: newHistory.data[this.state.history.currentIndex - 1].tree, history: newHistory});\r\n        console.log(\"height\", this.state.height);\r\n    }\r\n\r\n    onClickReDo() {\r\n        if (this.state.history.currentIndex + 1 >= this.state.history.data.length) return;\r\n        const newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice()};\r\n        this.setState({tree: newHistory.data[this.state.history.currentIndex + 1].tree, history: newHistory});\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <MyNavbar onChoiceTable={this.onChoiceTable}\r\n                          indexCheckedTable={this.state.indexCheckedTable}/>\r\n                <div className=\"container\">\r\n\r\n                    <MyTable tree={this.state.history.data[this.state.history.currentIndex].tree}\r\n                             key={this.state.history.currentIndex}\r\n                             onClickCellInsertRow={this.onClickCellInsertRow} onClickCellInsertCol={this.onClickCellInsertCol}\r\n\r\n                    />\r\n                    <div className=\"\">\r\n                        <div className=\"d-block \">\r\n\r\n\r\n                        </div>\r\n                        <History history={this.state.history}\r\n                                 key={this.state.history.currentIndex}\r\n                                 enableUnDo={this.state.history.currentIndex > 0}\r\n                                 enableReDo={(this.state.history.currentIndex + 1) < this.state.history.data.length}\r\n                                 onClickUnDo={this.onClickUnDo}\r\n                                 onClickReDo={this.onClickReDo}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                );\r\n                }\r\n                }\r\n\r\n                export default App;\r\n","import update from 'react-addons-update';\r\n\r\n\r\nexport function Node(data = {value: 0, color: \"white\", VerticalSpan: 1}) {\r\n    ({value: this.value, color: this.color, VerticalSpan: this.VerticalSpan} = data);\r\n    this.children = [];\r\n}\r\n\r\nexport function Tree(json, data = {value: 0, color: \"white\", VerticalSpan: 1}) {\r\n    if (json) {\r\n        this._root = JSON.parse(json)._root;\r\n    } else {\r\n        let node = new Node(data);\r\n        this._root = node;\r\n    }\r\n}\r\n\r\nTree.prototype.traverse = function (callback) {\r\n    (function recurse(currentNode) {\r\n        for (let i = 0, length = currentNode.children.length; i < length; i++) {\r\n            recurse(currentNode.children[i]);\r\n        }\r\n        callback(currentNode);\r\n    })(this._root);\r\n};\r\n\r\n/**\r\n * Добавляет новый столбец позицию - слева от выбранной ячейки\r\n *\r\n * @param {number} value ячейки, слева от которой будем добавлять столбец\r\n * @return {tree}  новая таблица с добавленным столбцом\r\n */\r\nTree.prototype.addColumn = function (targetValue) {\r\n\r\n    let maxValue = this.getMaxValue();\r\n    let currentCell = this.findNode(targetValue);\r\n    const indexesParents = this.getParentsIndex(currentCell);\r\n\r\n\r\n    for (let i = indexesParents.length - 1; i > -1; i--) {\r\n        if (indexesParents[i] != 0) break;\r\n        currentCell = this.getParent(currentCell);\r\n    }\r\n    const cellForInsert = currentCell;\r\n\r\n    let node = new Node({value: ++maxValue, color: \"Green\", VerticalSpan: 1});\r\n    let currentNode = node;\r\n    for (let i = this.getDepth(cellForInsert); i < this.getMaxDepth(); i++) {\r\n        currentNode.children.push(new Node({value: ++maxValue, color: \"Green\", VerticalSpan: 1}));\r\n        currentNode = currentNode.children[0];\r\n    }\r\n\r\n    return this.addCellWithShiftRight(node, cellForInsert);\r\n}\r\n\r\n\r\n/**\r\n * Добавляет ячейку со сдвигом вправо\r\n *\r\n * @param {node} ячейка, слева от которой добавим столбец\r\n * @param {node} ячейка, которуб будем добавлять\r\n * @return {tree}  новая таблица с добавленной ячейкой\r\n */\r\nTree.prototype.addCellWithShiftRight = function (cell, target) {\r\n\r\n    const path = {_root: {children: {}}};\r\n    let currentPath = path._root.children;\r\n\r\n    const indexesParents = this.getParentsIndex(target);\r\n\r\n    for (let i = 0; i < indexesParents.length - 1; i++) {\r\n        currentPath[indexesParents[i]] = {children: {}};\r\n        currentPath = currentPath[indexesParents[i]].children;\r\n    }\r\n\r\n    currentPath['$splice'] = [[indexesParents[indexesParents.length - 1], 0, cell]];\r\n\r\n    return update(this, path);\r\n}\r\n\r\n/**\r\n * Добавляет ячейку со сдвигом вниз\r\n *\r\n * @param {node} ячейка, слева от которой добавим столбец\r\n * @param {node} ячейка, которую будем добавлять\r\n * @return {tree}  новая таблица с добавленной ячейкой\r\n */\r\n\r\nTree.prototype.addCellWithShiftDown = function (cell, target) {\r\n\r\n    const path = {_root: {children: {}}};\r\n    let currentPath = path._root.children;\r\n\r\n    const indexesParents = this.getParentsIndex(target);\r\n\r\n    for (let i = 0; i < indexesParents.length - 1; i++) {\r\n        currentPath[indexesParents[i]] = {children: {}};\r\n        currentPath = currentPath[indexesParents[i]].children;\r\n    }\r\n\r\n    currentPath['$splice'] = [[indexesParents.pop(), 1, cell]];\r\n\r\n    return update(this, path);\r\n}\r\n\r\n/**\r\n * Увеличивает на единицу VerticalSpan ячейки\r\n *\r\n * @param {node} ячейка, спан которой будет увеличен\r\n * @return {tree}  новая таблица с добавленной ячейкой\r\n */\r\nTree.prototype.incrementVerticalSpan = function (target) {\r\n    const path = {_root: {children: {}}};\r\n    let currentPath = path._root.children;\r\n\r\n    const indexesParents = this.getParentsIndex(target);\r\n\r\n    for (let i = 0; i < indexesParents.length - 1; i++) {\r\n        currentPath[indexesParents[i]] = {children: {}};\r\n        currentPath = currentPath[indexesParents[i]].children;\r\n    }\r\n    currentPath[indexesParents.pop()] = {\r\n        VerticalSpan: {\r\n            $apply: function (x) {\r\n                return Number(x + 1);\r\n            }\r\n        }\r\n    };\r\n    return update(this, path);\r\n}\r\n\r\n\r\n/**\r\n * Добавляет новую строку выше указанной ячейки\r\n *\r\n * @param {number} value ячейки, выше которой будем добавлять строку\r\n * @return {tree}  новая таблица с добавленной ячейкой\r\n */\r\nTree.prototype.addRow = function (targetValue) {\r\n    let newTree = update(this, {});\r\n    let maxValue = this.getMaxValue();\r\n    const targetRow = this.getDepth(this.findNode(targetValue)) - 1;\r\n    let cellsToChange = [];\r\n\r\n    this.traverse((node) => {\r\n        if (this.hasRow(targetRow, node)) {\r\n            cellsToChange.push(node);\r\n        }\r\n    });\r\n\r\n    for (let i = 0; i < cellsToChange.length; i++) {\r\n\r\n        if (cellsToChange[i].children.length == 0 || this.hasRow(targetRow + 1, cellsToChange[i])) {\r\n            newTree = newTree.incrementVerticalSpan(cellsToChange[i]);\r\n            continue;\r\n        }\r\n\r\n        for (let k = 0; k < cellsToChange[i].children.length; k++) {\r\n            let newCell = new Node({VerticalSpan: 1, color: \"Yellow\", value: ++maxValue});\r\n            newCell.children = [cellsToChange[i].children[k]];\r\n\r\n            newTree = newTree.addCellWithShiftDown(newCell, cellsToChange[i].children[k]);\r\n        }\r\n    }\r\n    return newTree;\r\n}\r\n\r\n\r\nTree.prototype.getParent = function (node) {\r\n    let parent;\r\n    this.traverse((currentNode) => {\r\n        const isParent = currentNode.children.find((item) => {\r\n            return item == node;\r\n        });\r\n        if (isParent) parent = currentNode;\r\n    });\r\n    return parent;\r\n}\r\n\r\nTree.prototype.getDepth = function (node) {\r\n    let depth = 0, currentNode = node;\r\n\r\n    while (currentNode) {\r\n        currentNode = this.getParent(currentNode);\r\n        if (currentNode) depth += currentNode.VerticalSpan;\r\n    }\r\n\r\n    return depth;\r\n}\r\n\r\nTree.prototype.sortOfDepth = function () {\r\n    let arrayOfDepth = [];\r\n    this.traverse((node) => {\r\n        const depth = this.getDepth(node);\r\n        if (!arrayOfDepth[depth]) arrayOfDepth[depth] = [];\r\n        arrayOfDepth[depth].push(node);\r\n\r\n    });\r\n    return arrayOfDepth;\r\n}\r\n\r\nTree.prototype.getMaxDepth = function () {\r\n    let maxDepth = 0;\r\n    this.traverse((node) => {\r\n        if (this.getDepth(node) > maxDepth) {\r\n            maxDepth = this.getDepth(node);\r\n        }\r\n    });\r\n    return maxDepth;\r\n};\r\n\r\nTree.prototype.getMaxValue = function () {\r\n    let maxValue = 0;\r\n    this.traverse((node) => {\r\n        if (node.value > maxValue) {\r\n            maxValue = node.value;\r\n        }\r\n    });\r\n    return maxValue;\r\n};\r\n\r\n\r\nTree.prototype.getParentsIndex = function (node) {\r\n    let arrIndex = [];\r\n    let currentValue = node.value;\r\n    let currentNode = this.getParent(node);\r\n\r\n    while (currentNode) {\r\n        arrIndex.unshift(currentNode.children.findIndex((element) => element.value == currentValue));\r\n        currentValue = currentNode.value;\r\n        currentNode = this.getParent(currentNode);\r\n    }\r\n    return arrIndex;\r\n};\r\n\r\nTree.prototype.findNode = function (value) {\r\n    let foundNode;\r\n    this.traverse((node) => {\r\n        if (node.value === value) {\r\n            foundNode = node;\r\n        }\r\n    });\r\n    return foundNode || -1;\r\n};\r\n\r\nTree.prototype.getNumbersRow = function (node) {\r\n    let arrRows = [];\r\n    arrRows[0] = this.getDepth(node);\r\n    for (let i = 1; i < node.VerticalSpan; i++) {\r\n        arrRows.push(i + arrRows[0]);\r\n    }\r\n    return arrRows;\r\n}\r\n\r\nTree.prototype.hasRow = function (row, node) {\r\n    let arrRows = this.getNumbersRow(node);\r\n    return (arrRows.findIndex((current) => current == row)) != -1;\r\n}\r\n\r\nTree.prototype.getLowerCells = function () {\r\n\r\n    let current = this._root.children[0];\r\n    while (current.children.length != 0) {\r\n        current = current.children[0];\r\n    }\r\n    let Rows = this.getNumbersRow(current);\r\n    let lowerRow = Rows[Rows.length - 1];\r\n    let lowerCells = [];\r\n\r\n    this.traverse((node) => {\r\n        if (this.hasRow(lowerRow, node)) lowerCells.push(node);\r\n    })\r\n    return lowerCells;\r\n\r\n}\r\n\r\n\r\nTree.prototype.isParentOfChild = function (parent, child) {\r\n    let currentNode = child;\r\n    while (this.getParent(currentNode) != undefined) {\r\n        if (this.getParent(currentNode) == parent) return true;\r\n        currentNode = this.getParent(currentNode);\r\n    }\r\n    return false;\r\n}\r\n\r\nTree.prototype.getColSpan = function (node) {\r\n    let countDepthChildren = 0;\r\n    const lowerCells = this.getLowerCells();\r\n\r\n    for (let i = 0; i < lowerCells.length; i++) {\r\n        if (this.isParentOfChild(node, lowerCells[i])) {\r\n            countDepthChildren++;\r\n        }\r\n    }\r\n    return countDepthChildren;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {Tree} from \"./tree\";\nimport {jsonTree1, jsonTree2,jsonTree3} from \"./examples-table\";\n\n\nexport const tree1 = new Tree(jsonTree1);\nexport const tree2 = new Tree(jsonTree2);\nexport const tree3 = new Tree(jsonTree3);\n\nconst history = {currentIndex: 0, data: [{text: \"Создана таблица №3\", tree: tree3}]};\nReactDOM.render(<App history={history}/>, document.getElementById('root'));\n\n\n","export let jsonTree1 = '{\"_root\":{\"value\":0,\"color\":\"White\",\"VerticalSpan\":1,\"children\":[{\"value\":1,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":6,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":11,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":16,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]},{\"value\":2,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":7,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":12,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":17,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]},{\"value\":3,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":8,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":13,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":18,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]},{\"value\":4,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":9,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":14,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":19,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]},{\"value\":5,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":10,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":15,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":20,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]}]}}';\r\nexport let jsonTree2 = '{\"_root\":{\"value\":0,\"color\":\"White\",\"VerticalSpan\":1,\"children\":[{\"value\":1,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":4,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":7,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[]}]},{\"value\":5,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":8,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[]}]}]},{\"value\":2,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":6,\"color\":\"LightGreen\",\"VerticalSpan\":2,\"children\":[]}]},{\"value\":3,\"color\":\"Coral\",\"VerticalSpan\":2,\"children\":[{\"value\":9,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[]},{\"value\":10,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[]}]}]}}';\r\nexport let jsonTree3 = '{\"_root\":{\"value\":0,\"color\":\"White\",\"VerticalSpan\":1,\"children\":[{\"value\":1,\"color\":\"Coral\",\"VerticalSpan\":2,\"children\":[{\"value\":8,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":12,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]},{\"value\":2,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":5,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":9,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":13,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]},{\"value\":10,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":14,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]},{\"value\":6,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":11,\"color\":\"MediumPurple\",\"VerticalSpan\":2,\"children\":[]}]}]},{\"value\":3,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":7,\"color\":\"LightGreen\",\"VerticalSpan\":2,\"children\":[{\"value\":15,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]},{\"value\":16,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]},{\"value\":4,\"color\":\"Coral\",\"VerticalSpan\":3,\"children\":[{\"value\":17,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}}';"],"sourceRoot":""}