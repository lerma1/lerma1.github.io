{"version":3,"sources":["Components/Table.js","Components/History.js","Components/Insert-form.js","Components/Navbar.js","Components/App.js","tree.js","index.js","examples-table.js"],"names":["MyTable","props","state","tree","tdElements","arrayOfDepth","this","sortOfDepth","widthElement","length","heightElement","getMaxDepth","i","tr","key","Date","map","currentNode","OverlayTrigger","trigger","placement","overlay","Tooltip","id","value","onClick","onClickCellInsertRow","className","onClickCellInsertCol","rowSpan","VerticalSpan","colSpan","getColSpan","style","color","children","push","Component","History","history","currentIndex","unDoButtonEnabled","Button","onClickUnDo","unDoButtonDisabled","disabled","reDoButtonEnabled","onClickReDo","reDoButtonDisabled","historyList","data","item","index","text","enableUnDo","enableReDo","MyNavbar","Navbar","collapseOnSelect","expand","bg","variant","Toggle","aria-controls","Collapse","Nav","ToggleButtonGroup","type","name","defaultValue","onChange","onChoiceTable","ToggleButton","App","isValidate","Number","isInteger","getMaxValue","alert","insertRow","newTree","addRow","newHistory","slice","setState","isCheckedRow","isCheckedCol","insertCol","addColumn","onClickButtonInsertRow","bind","onClickButtonInsertCol","indexCheckedTable","event","target","document","getElementById","tree1","tree2","tree3","console","log","height","Node","Tree","node","_root","prototype","traverse","callback","recurse","targetValue","maxValue","currentCell","findNode","indexesParents","getParentsIndex","getParent","cellForInsert","getDepth","addCellWithShiftRight","cell","path","currentPath","update","addCellWithShiftDown","pop","incrementVerticalSpan","$apply","x","targetRow","cellsToChange","hasRow","k","newCell","parent","undefined","find","depth","maxDepth","arrIndex","currentValue","unshift","findIndex","element","foundNode","getNumbersRow","arrRows","row","current","getLowerCells","Rows","lowerRow","lowerCells","isParentOfChild","child","countDepthChildren","JSON","parse","ReactDOM","render"],"mappings":"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","file":"static/js/main.b09143a4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport '../css/style.css'\r\n\r\n\r\nclass MyTable extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tree: this.props.tree,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const tdElements = [];\r\n        const WIDTH = 900;\r\n        const HEIGHT = 400;\r\n\r\n        const arrayOfDepth = this.state.tree.sortOfDepth();\r\n\r\n        let widthElement = WIDTH/arrayOfDepth[arrayOfDepth.length-1].length;//еще тут нужно на нужное количество делить\r\n        let heightElement = HEIGHT/ this.props.tree.getMaxDepth();\r\n\r\n        for (let i = 1; i < arrayOfDepth.length; i++) {\r\n\r\n            let tr = <tr key={'tr' + i + new Date()}>\r\n                {arrayOfDepth[i].map((currentNode) =>\r\n                    <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={\r\n                        <Tooltip  id={`tooltip-right`}  >\r\n                            <button id={currentNode.value} onClick={this.props.onClickCellInsertRow} className=\"btn btn-outline-light border-0 d-block \">Вставить строку</button>\r\n                            <button id={currentNode.value} onClick={this.props.onClickCellInsertCol} className=\"btn btn-outline-light border-0 d-block\">Вставить столбец</button>\r\n                        </Tooltip>\r\n                    } key={currentNode.value}>\r\n                        <td key={currentNode.value}\r\n                          rowSpan={currentNode.VerticalSpan}\r\n                          colSpan={this.state.tree.getColSpan(currentNode)}\r\n                          style={{\r\n                              \"background-color\": currentNode.color,\r\n                              \"width\": ((currentNode.children.length || 1) * widthElement) + \"px\",\r\n                              \"height\": (currentNode.VerticalSpan * heightElement) + \"px\"\r\n                          }}\r\n                          >\r\n                    {currentNode.value}\r\n                </td></OverlayTrigger>)}\r\n            </tr>;\r\n\r\n            tdElements.push(tr);\r\n        }\r\n\r\n        return (\r\n            <div className=\"container \" id = \"table\">\r\n                <table className=\"table-tree h4\">\r\n                    {tdElements}\r\n                </table>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyTable","import React, {Component} from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport '../css/style.css'\r\n\r\n\r\nclass History extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            history: this.props.history,\r\n            currentIndex: this.props.history.currentIndex,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const unDoButtonEnabled = <Button className=\"m-2 d-inline-flex btn-success\"\r\n                                        onClick={this.props.onClickUnDo}>Отменить</Button>;\r\n        const unDoButtonDisabled = <Button className=\"m-2 d-inline-flex btn-secondary\" disabled>Отменить</Button>;\r\n        const reDoButtonEnabled = <Button className=\"m-2 d-inline-flex btn-success\"\r\n                                        onClick={this.props.onClickReDo}>Вернуть</Button>;\r\n        const reDoButtonDisabled = <Button className=\"m-2 d-inline-flex btn-secondary\" disabled>Вставить</Button>;\r\n\r\n\r\n        const historyList = this.state.history.data.map((item, index) =>\r\n            (this.state.history.currentIndex == index) ?\r\n                <li key={index} className=\"font-weight-bold\"> {item.text} </li> :\r\n                <li key={index} className=\"\"> {item.text} </li>\r\n        );\r\n\r\n        return (\r\n            <div className=\" card history  p-0 m-auto\">\r\n                <div className=\"card-header d-flex justify-content-between \">\r\n                    <div className=\"d-inline-block h5 mt-auto mb-auto\">История</div>\r\n                    <div className=\"\">\r\n                        {(this.props.enableUnDo) ? unDoButtonEnabled : unDoButtonDisabled}\r\n                        {(this.props.enableReDo) ? reDoButtonEnabled : reDoButtonDisabled}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"border history-list m-3\">\r\n                    <ul id=\"history-list\">\r\n                        {historyList}\r\n                    </ul>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default History;\r\n","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport '../css/style.css'\r\n\r\n\r\nclass MyForm extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n\r\n            <div className=\"container card p-0\">\r\n\r\n\r\n                <h5 className=\"card-header\">Вставка столбцов/строк</h5>\r\n                <div className=\"card-body pt-0 d-flex justify-content-between\">\r\n                    <div className =\"m-auto\">\r\n                    <label htmlFor=\"input\" className=\"mr-4 h6\">Номер ячейки: </label>\r\n                    <div className=\"input-number m-auto\">\r\n                        <input type=\"text\" className=\"form-control  d-inline-block\" id=\"input\" placeholder=\"7\"\r\n                               defaultValue=\"7\" ></input>\r\n                    </div>\r\n                    </div>\r\n                        <Button variant=\"success\" className=\"btn m-3\" onClick={this.props.onClickInsertRow}>Вставить строку</Button>\r\n                        <Button variant=\"success\" className=\"btn m-3\" onClick={this.props.onClickInsertCol}>Вставить столбец</Button>\r\n                    </div>\r\n\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyForm","import React, {Component} from 'react';\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\n\r\n\r\n\r\n\r\nexport default class MyNavbar extends Component {\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"info\" variant=\"dark\" className =\"d-flex justify-content-between\" >\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className =\"d-inline-block mr-auto ml-auto\">\r\n                        <ToggleButtonGroup className=\"\" type=\"radio\" name=\"options\" defaultValue={3}   onChange={this.props.onChoiceTable} >\r\n                            <ToggleButton variant=\"outline-light\" value={1}>Таблица 1</ToggleButton>\r\n                            <ToggleButton variant=\"outline-light\" value={2}>Таблица 2</ToggleButton>\r\n                            <ToggleButton variant=\"outline-light\" value={3}>Таблица 3</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n            ;\r\n    }\r\n}","import React, {Component} from 'react';\nimport MyTable from \"./Table\";\nimport MyForm from \"./Insert-form\"\nimport History from \"./History\";\nimport MyNavbar from \"./Navbar\";\nimport {tree1, tree2, tree3} from \"../index\";\nimport \"../css/style.css\"\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.onClickButtonInsertRow = this.onClickButtonInsertRow.bind(this);\n        this.onClickButtonInsertCol = this.onClickButtonInsertCol.bind(this);\n        this.onChoiceTable = this.onChoiceTable.bind(this);\n        this.onClickUnDo = this.onClickUnDo.bind(this);\n        this.onClickReDo = this.onClickReDo.bind(this);\n        this.onClickCellInsertRow = this.onClickCellInsertRow.bind(this);\n        this.onClickCellInsertCol = this.onClickCellInsertCol.bind(this);\n        //this.insertRow = this.insertRow.bind(this);\n       // this.insertCol = this.insertCol.bind(this);\n\n        this.state = {\n            tree: this.props.history.data[0].tree,\n            history: this.props.history,\n            enableUnDo: false,\n            enableReDo: false,\n            isCheckedRow: true,\n            isCheckedCol: false,\n            indexCheckedTable: 1,\n\n        }\n    }\n    isValidate = (value) => {\n\n        if (!Number.isInteger(value)) {\n            alert(\"Введите целое число - номер ячейки в таблице!\");\n            return false;\n        }\n\n        if (value > this.state.tree.getMaxValue()) {\n            alert(\"Элемент с таким номером не найден!\");\n            return false;\n        }\n        return true;\n    }\n\n    insertRow = (value) => {\n        const newTree = this.state.tree.addRow(value);\n        let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice()};\n\n        if (newHistory.currentIndex != newHistory.data.length - 1) newHistory.data.slice(0, newHistory.currentIndex);\n        newHistory.data.push({text: `Вставлена строка в ячейку № ${value}`, tree: newTree});\n\n        this.setState({tree: newTree, isCheckedRow: true, isCheckedCol: false, history: newHistory});\n    }\n\n    insertCol = (value) => {\n        const newTree = this.state.tree.addColumn(value);\n        let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice()};\n\n        if (newHistory.currentIndex != newHistory.data.length - 1) newHistory.data.slice(0, newHistory.currentIndex);\n        newHistory.data.push({text: `Вставлен столбец в ячейку № ${value}`, tree: newTree});\n\n        this.setState({tree: newTree, isCheckedRow: false, isCheckedCol: true, history: newHistory});\n    }\n\n    onClickCellInsertRow(event) {\n        const value = Number(event.target.id);\n        this.insertRow(value);\n    }\n\n    onClickCellInsertCol(event) {\n        const value = Number(event.target.id);\n        this.insertCol(value);\n    }\n\n    onClickButtonInsertRow() {\n            const value = Number(document.getElementById(\"input\").value);\n            if(!this.isValidate(value))return;\n            this.insertRow(value);\n\n    }\n\n    onClickButtonInsertCol() {\n        const value = Number(document.getElementById(\"input\").value);\n        if(!this.isValidate(value))return;\n        this.insertCol(value);\n    }\n\n    onChoiceTable(value) {\n\n        if (value == 1) {\n            const newTree = tree1;\n            let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice()};\n            newHistory.data.push({text: `Создана Таблица №1`, tree: newTree});\n\n            this.setState({tree: newTree, history: newHistory, indexCheckedTable: 0});\n\n        }\n        if (value == 2) {\n            const newTree = tree2;\n            let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice()};\n            newHistory.data.push({text: `Создана таблица №2`, tree: newTree});\n\n            this.setState({history: newHistory, tree: newTree, indexCheckedTable: 1});\n        }\n        if (value == 3) {\n            const newTree = tree3;\n            let newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice()};\n            newHistory.data.push({text: `Создана таблица №3`, tree: newTree});\n\n            this.setState({history: newHistory, tree: newTree, indexCheckedTable: 1});\n        }\n    }\n\n    onClickUnDo() {\n\n        const newHistory = {currentIndex: this.state.history.currentIndex - 1, data: this.state.history.data.slice()};\n        this.setState({tree: newHistory.data[this.state.history.currentIndex - 1], history: newHistory});\n        console.log(\"height\", this.state.height);\n    }\n\n    onClickReDo() {\n        if (this.state.history.currentIndex + 1 >= this.state.history.data.length) return;\n        const newHistory = {currentIndex: this.state.history.currentIndex + 1, data: this.state.history.data.slice()};\n        this.setState({tree: newHistory.data[this.state.history.currentIndex + 1], history: newHistory});\n\n    }\n\n\n\n    render() {\n\n\n        return (\n\n\n            <div className=\"App\">\n                <MyNavbar onChoiceTable={this.onChoiceTable}\n                          indexCheckedTable={this.state.indexCheckedTable}/>\n                <div className=\"container\">\n\n                    <MyTable tree={this.state.history.data[this.state.history.currentIndex].tree}\n                             key={this.state.history.currentIndex}\n                             onClickCellInsertRow={this.onClickCellInsertRow} onClickCellInsertCol={this.onClickCellInsertCol}\n\n                    />\n                    <div className=\"pl-5\">\n                        <div className=\"d-block \">\n\n\n                        </div>\n                        <History history={this.state.history}\n                                 key={this.state.history.currentIndex}\n                                 enableUnDo={this.state.history.currentIndex > 0}\n                                 enableReDo={(this.state.history.currentIndex + 1) < this.state.history.data.length}\n                                 onClickUnDo={this.onClickUnDo}\n                                 onClickReDo={this.onClickReDo}\n\n                        />\n                    </div>\n                </div>\n            </div>\n                );\n                }\n                }\n\n                export default App;\n","import update from 'react-addons-update';\r\n\r\n\r\nexport function Node(data = {value: 0, color: \"white\", VerticalSpan: 1}) {\r\n    ({value:this.value, color: this.color, VerticalSpan: this.VerticalSpan} = data);\r\n    this.children = [];\r\n}\r\n\r\nexport function Tree(data = {value: 0, color: \"white\", VerticalSpan: 1} ) {\r\n    let node = new Node(data);\r\n    this._root = node;\r\n}\r\n\r\nTree.prototype.traverse = function (callback) {\r\n    (function recurse(currentNode) {\r\n        for (let i = 0, length = currentNode.children.length; i < length; i++) {\r\n            recurse(currentNode.children[i]);\r\n        }\r\n        callback(currentNode);\r\n    })(this._root);\r\n};\r\n\r\n/**\r\n * Добавляет новый столбец позицию - слева от выбранной ячейки\r\n *\r\n * @param {number} value ячейки, слева от которой будем добавлять столбец\r\n * @return {tree}  новая таблица с добавленным столбцом\r\n */\r\nTree.prototype.addColumn = function(targetValue) {\r\n\r\n    let maxValue = this.getMaxValue();\r\n    let currentCell = this.findNode(targetValue);\r\n    const indexesParents = this.getParentsIndex(currentCell);\r\n\r\n\r\n    for (let i = indexesParents.length - 1; i > -1; i--) {\r\n        if (indexesParents[i] != 0) break;\r\n        currentCell = this.getParent(currentCell);\r\n    }\r\n    const cellForInsert = currentCell;\r\n\r\n    let node = new Node({value: ++maxValue, color: \"Green\", VerticalSpan: 1});\r\n    let currentNode = node;\r\n    for (let i = this.getDepth(cellForInsert ); i < this.getMaxDepth(); i++) {\r\n        currentNode.children.push(new Node({value: ++maxValue, color: \"Green\", VerticalSpan: 1}));\r\n        currentNode = currentNode.children[0];\r\n    }\r\n\r\n    return this.addCellWithShiftRight(node, cellForInsert);\r\n}\r\n\r\n\r\n/**\r\n * Добавляет ячейку со сдвигом вправо\r\n *\r\n * @param {node} ячейка, слева от которой добавим столбец\r\n * @param {node} ячейка, которуб будем добавлять\r\n * @return {tree}  новая таблица с добавленной ячейкой\r\n */\r\nTree.prototype.addCellWithShiftRight = function(cell, target) {\r\n\r\n    const path = {_root: {children: {}}};\r\n    let currentPath = path._root.children;\r\n\r\n    const indexesParents = this.getParentsIndex(target);\r\n\r\n    for (let i = 0; i < indexesParents.length - 1; i++) {\r\n        currentPath[indexesParents[i]] = {children: {}};\r\n        currentPath = currentPath[indexesParents[i]].children;\r\n    }\r\n\r\n    currentPath['$splice'] = [[indexesParents[indexesParents.length - 1], 0, cell]];\r\n\r\n    return update(this, path);\r\n}\r\n\r\n/**\r\n * Добавляет ячейку со сдвигом вниз\r\n *\r\n * @param {node} ячейка, слева от которой добавим столбец\r\n * @param {node} ячейка, которую будем добавлять\r\n * @return {tree}  новая таблица с добавленной ячейкой\r\n */\r\n\r\nTree.prototype.addCellWithShiftDown = function(cell, target) {\r\n\r\n    const path = {_root: {children: {}}};\r\n    let currentPath = path._root.children;\r\n\r\n    const indexesParents = this.getParentsIndex(target);\r\n\r\n    for (let i = 0; i < indexesParents.length - 1; i++) {\r\n        currentPath[indexesParents[i]] = {children: {}};\r\n        currentPath = currentPath[indexesParents[i]].children;\r\n    }\r\n\r\n    currentPath['$splice'] = [[indexesParents.pop(), 1, cell]];\r\n\r\n    return update(this, path);\r\n}\r\n\r\n/**\r\n * Увеличивает на единицу VerticalSpan ячейки\r\n *\r\n * @param {node} ячейка, спан которой будет увеличен\r\n * @return {tree}  новая таблица с добавленной ячейкой\r\n */\r\nTree.prototype.incrementVerticalSpan = function(target) {\r\n    const path = {_root: {children: {}}};\r\n    let currentPath = path._root.children;\r\n\r\n    const indexesParents = this.getParentsIndex(target);\r\n\r\n    for (let i = 0; i < indexesParents.length - 1; i++) {\r\n        currentPath[indexesParents[i]] = {children: {}};\r\n        currentPath = currentPath[indexesParents[i]].children;\r\n    }\r\n    currentPath[indexesParents.pop()] = {\r\n        VerticalSpan: {\r\n            $apply: function (x) {\r\n                return Number(x + 1);\r\n            }\r\n        }\r\n    };\r\n    return update(this, path);\r\n}\r\n\r\n\r\n/**\r\n * Добавляет новую строку выше указанной ячейки\r\n *\r\n * @param {number} value ячейки, выше которой будем добавлять строку\r\n * @return {tree}  новая таблица с добавленной ячейкой\r\n */\r\nTree.prototype.addRow = function(targetValue) {\r\n    let newTree = update(this,{});\r\n    let maxValue = this.getMaxValue();\r\n\r\n    const targetRow = this.getDepth(this.findNode(targetValue)) - 1;\r\n    let cellsToChange = [];\r\n    this.traverse((node) => {\r\n        if (this.hasRow(targetRow, node)) {\r\n            cellsToChange.push(node);\r\n        }\r\n    });\r\n\r\n    for (let i = 0; i < cellsToChange.length; i++) {\r\n\r\n        if (cellsToChange[i].children.length == 0 || this.hasRow(targetRow + 1, cellsToChange[i])) {\r\n\r\n            newTree = newTree.incrementVerticalSpan(cellsToChange[i]);\r\n\r\n        } else {\r\n\r\n            for (let k = 0; k < cellsToChange[i].children.length; k++) {\r\n                let newCell = new Node({VerticalSpan: 1, color: \"Yellow\", value: ++maxValue});\r\n                newCell.children = [cellsToChange[i].children[k]];\r\n\r\n                newTree = newTree.addCellWithShiftDown(newCell, cellsToChange[i].children[k]);\r\n            }\r\n        }\r\n    }\r\n    return newTree;\r\n\r\n\r\n}\r\n\r\n\r\nTree.prototype.getParent = function(node)  {\r\n    let parent;\r\n    this.traverse((currentNode) => {\r\n        const isParent = currentNode.children.find((item) => {\r\n            return item == node;\r\n        });\r\n        if (isParent != undefined) parent = currentNode;\r\n    });\r\n    return parent;\r\n}\r\n\r\nTree.prototype.getDepth = function(node) {\r\n    let depth = 0;\r\n    let currentNode = node;\r\n\r\n    while (currentNode != undefined) {\r\n        currentNode = this.getParent(currentNode);\r\n        if (currentNode) depth += currentNode.VerticalSpan;\r\n    }\r\n\r\n    return depth;\r\n}\r\n\r\nTree.prototype.sortOfDepth = function()  {\r\n    let arrayOfDepth = [];\r\n    this.traverse((node) => {\r\n        const depth = this.getDepth(node);\r\n        if (!arrayOfDepth[depth]) arrayOfDepth[depth] = [];\r\n        arrayOfDepth[depth].push(node);\r\n\r\n    });\r\n    return arrayOfDepth;\r\n}\r\n\r\nTree.prototype.getMaxDepth = function()  {\r\n    let maxDepth = 0;\r\n    this.traverse((node) => {\r\n        if (this.getDepth(node) > maxDepth) {\r\n            maxDepth = this.getDepth(node);\r\n        }\r\n    });\r\n    return maxDepth;\r\n};\r\n\r\nTree.prototype.getMaxValue = function() {\r\n    let maxValue = 0;\r\n    this.traverse((node) => {\r\n        if (node.value > maxValue) {\r\n            maxValue = node.value;\r\n        }\r\n    });\r\n    return maxValue;\r\n};\r\n\r\n\r\nTree.prototype.getParentsIndex = function (node) {\r\n    let arrIndex = [];\r\n    let currentValue = node.value;\r\n    let currentNode = this.getParent(node);\r\n\r\n    while (currentNode != undefined) {\r\n        arrIndex.unshift(currentNode.children.findIndex((element) => element.value == currentValue));\r\n        currentValue = currentNode.value;\r\n        currentNode = this.getParent(currentNode);\r\n\r\n    }\r\n    return arrIndex;\r\n};\r\n\r\nTree.prototype.findNode = function(value) {\r\n    let foundNode = null;\r\n    this.traverse((node) => {\r\n        if (node.value === value) {\r\n            foundNode = node;\r\n        }\r\n    });\r\n    return (foundNode === null) ? -1 : foundNode;\r\n};\r\n\r\nTree.prototype.getNumbersRow = function (node) {\r\n    let arrRows = [];\r\n    arrRows[0] = this.getDepth(node);\r\n    for (let i = 1; i < node.VerticalSpan; i++) {\r\n        arrRows.push(i + arrRows[0]);\r\n    }\r\n    return arrRows;\r\n}\r\n\r\nTree.prototype.hasRow = function (row, node) {\r\n    let arrRows = this.getNumbersRow(node);\r\n\r\n    return (arrRows.findIndex((current) => current == row)) != -1;\r\n}\r\n\r\nTree.prototype.getLowerCells = function () {\r\n\r\n    let current = this._root.children[0];\r\n    while (current.children.length != 0) {\r\n        current = current.children[0];\r\n    }\r\n    let Rows = this.getNumbersRow(current);\r\n    let lowerRow = Rows[Rows.length - 1];//нашли самый нижний уровень\r\n\r\n    let lowerCells = [];\r\n\r\n    this.traverse((node) => {\r\n        if (this.hasRow(lowerRow, node)) lowerCells.push(node);\r\n    })\r\n    return lowerCells;\r\n\r\n}\r\n\r\n\r\nTree.prototype.isParentOfChild = function (parent, child) {\r\n    let currentNode = child;\r\n    while (this.getParent(currentNode ) != undefined) {\r\n        if (this.getParent(currentNode) == parent) return true;\r\n        currentNode = this.getParent(currentNode );\r\n    }\r\n    return false;\r\n}\r\n\r\nTree.prototype.getColSpan = function (node, arrayOfDepth) {\r\n    let countDepthChildren = 0;\r\n    const lowerCells = this.getLowerCells();\r\n\r\n    for (let i = 0; i < lowerCells.length; i++) {\r\n        if (this.isParentOfChild(node, lowerCells[i])) {\r\n            countDepthChildren++;\r\n        }\r\n    }\r\n    return countDepthChildren;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport {Tree} from \"./tree\";\nimport {jsonTree1, jsonTree2,jsonTree3} from \"./examples-table\";\n\n\nexport const tree1 = new Tree();\ntree1._root = JSON.parse(jsonTree1)._root;\nexport const tree2 = new Tree();\ntree2._root = JSON.parse(jsonTree2)._root;\nexport const tree3 = new Tree();\ntree3._root = JSON.parse(jsonTree3)._root;\n\n\nconst history = {currentIndex: 0, data: [{text: \"Создана таблица №3\", tree: tree3}]};\nReactDOM.render(<App history={history}/>, document.getElementById('root'));\n\n\n","export let jsonTree1 = '{\"_root\":{\"value\":0,\"color\":\"White\",\"VerticalSpan\":1,\"children\":[{\"value\":1,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":6,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":11,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":16,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]},{\"value\":2,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":7,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":12,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":17,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]},{\"value\":3,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":8,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":13,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":18,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]},{\"value\":4,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":9,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":14,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":19,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]},{\"value\":5,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":10,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":15,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":20,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}]}]}}';\r\nexport let jsonTree2 = '{\"_root\":{\"value\":0,\"color\":\"White\",\"VerticalSpan\":1,\"children\":[{\"value\":1,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":4,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":7,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[]}]},{\"value\":5,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":8,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[]}]}]},{\"value\":2,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":6,\"color\":\"LightGreen\",\"VerticalSpan\":2,\"children\":[]}]},{\"value\":3,\"color\":\"Coral\",\"VerticalSpan\":2,\"children\":[{\"value\":9,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[]},{\"value\":10,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[]}]}]}}';\r\nexport let jsonTree3 = '{\"_root\":{\"value\":0,\"color\":\"White\",\"VerticalSpan\":1,\"children\":[{\"value\":1,\"color\":\"Coral\",\"VerticalSpan\":2,\"children\":[{\"value\":8,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":12,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]},{\"value\":2,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":5,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":9,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":13,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]},{\"value\":10,\"color\":\"MediumPurple\",\"VerticalSpan\":1,\"children\":[{\"value\":14,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]},{\"value\":6,\"color\":\"LightGreen\",\"VerticalSpan\":1,\"children\":[{\"value\":11,\"color\":\"MediumPurple\",\"VerticalSpan\":2,\"children\":[]}]}]},{\"value\":3,\"color\":\"Coral\",\"VerticalSpan\":1,\"children\":[{\"value\":7,\"color\":\"LightGreen\",\"VerticalSpan\":2,\"children\":[{\"value\":15,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]},{\"value\":16,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]},{\"value\":4,\"color\":\"Coral\",\"VerticalSpan\":3,\"children\":[{\"value\":17,\"color\":\"CornflowerBlue\",\"VerticalSpan\":1,\"children\":[]}]}]}}';"],"sourceRoot":""}